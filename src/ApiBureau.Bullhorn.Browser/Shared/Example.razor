@inject IJSRuntime JSRuntime

<div class="card mb-2">
    <div class="card-body">
        <h5 class="card-title">
            <span class="badge bg-@GetBadgeType() me-2">@Temp.Type.ToString().ToLower()</span>
            @Temp.Description
        </h5>
        <div class="d-flex align-items-center">
            <code class="me-2">@Temp.Query</code>
            <button class="btn btn-outline-secondary btn-sm" @onclick="() => CopyToClipboard()">
                üìã Copy
            </button>
            <button class="btn btn-outline-success btn-sm ms-2" @onclick="() => Callback.InvokeAsync(Temp)">
                ‚û°Ô∏è Use
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ExampleDto Temp { get; set; } = default!;

    [Parameter]
    public EventCallback<ExampleDto> Callback { get; set; }

    public string GetBadgeType() => Temp.Type switch
    {
        ApiType.Query => "primary",
        ApiType.Search => "success",
        ApiType.Entity => "warning",
        _ => "secondary"
    };

    private async Task CopyToClipboard()
    {
        if (Temp.Query is null) return;

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Temp.Query);
    }
}